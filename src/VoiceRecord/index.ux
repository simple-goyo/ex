<template>
  <div class="doc-page">
    <div class="item-content">
      <!-- <input type="button" value="发送param到html" onclick="sendMsg"/> -->
      <text>等待来自html页面的消息: {{message}}</text>
    </div>
    <!-- 
      <div class="item-content">
        <text class="txt">上传文件：{{fileUploadData}}</text>
      </div>
      <input type="button" class="btn" @touchstart="start" @touchend="stop" value="录音" />
      <input type="button" class="btn" @click="playAudio" value="播放当前录音" />
      <input type="button" class="btn" onclick="uploadFile" value="上传文件"/>
      
    </div> -->
    <web src="{{pageUrl}}" trustedurl="{{trust}}" onmessage="messagefn" id="web"></web>
  </div>
</template>

<script>
import record from '@system.record'
import audio from '@system.audio'
import storage from '@system.storage'
import request from '@system.request'
import prompt from '@system.prompt'
import router from '@system.router'

import {WebAddr} from './constant'

var filename

export default {
  private: {
    path: '',
    fileUploadData: '',
    token: '',
    duration: 5000,
    sampleRate: 16000,
    numberOfChannels: 1,
    encodeBitRate: 16000,
    format: 'amr_nb',
    pageUrl: WebAddr.VoiceUrl,

    param: {
        'title': 'hello world0'
      },
    message: '',
      // 只有trustedurl中信任的网址才能实现和框架的双向通信
      // trustedurl的值为数组，元素可以是正则或字符串
      // trustedurl会默认添加web组件src属性的初始值
    trust: [
        /^http:\/\/.*\.html$/,
        /^http:\/\/.*$/,
        /^https:\/\/.*$/
      ]

  },
  // onInit() {
  //   this.$page.setTitleBar({ text: this.componentName })
  // },
  start() {
    this.message = '录音中...'
    record.start({
      duration: this.duration,
      sampleRate: this.sampleRate,
      numberOfChannels: this.numberOfChannels,
      encodeBitRate: this.encodeBitRate,
      format: this.format,
      success: (data) => {
        this.path = data.uri
        this.fileUploadData = data.uri
        
        var splitedFile = data.uri.split("/");
        filename = splitedFile[splitedFile.length-1]
        
        this.uploadFile()
      },
  fail: (err, code) => {
      this.path = 'handling fail, code=' + code
      }
    })
  },
  stop() {
    //this.path = '录音完成'
    record.stop()
  },
  playAudio() {
    audio.src = this.path
    audio.play()
  },
  changeValue(args, evt) {
    this[args] = evt.value
    storage.set({
      key: args,
      value: evt.value
    })
  },
  uploadFile () {
    const self = this
    request.upload({
      url: WebAddr.RecoUrl,
      files: [
        {
          uri: self.fileUploadData,
          name:'name',
          filename: "voice.amr"
        }
      ],
      data:[
        {
          name: 'name2',
          value: 'value1'
        }
      ],
      success: function (ret) {
        self.message = ret.data

        audio.src = WebAddr.baseUrl+'quickapp/voicerecord/SpeechSynthesizer.mp3'
        audio.play()
        
        // 显示提示语
        self.show_msg(ret.data)
        
        // // 跳转
        // setTimeout(() => {
        //   self.page_jump(ret.data)
        // }, 5000);
      },
      fail: function (msg, code) {
        self.fileUploadData = `${code}: ${msg}`
        console.info(`### request.upload ### ${code}: ${msg}`)
        self.message = msg.data
        prompt.showToast({
          message: `${code}: ${msg}`
        })
      }
    })
  },
  sendMsg () {
    const msg = JSON.stringify(this.param)
    this.$element('web').postMessage({message: msg})
  },
  messagefn (e) {
    //this.message = e.message

    // 判断开始或结束
    switch(e.message){
      case "start":
        this.start()
        break
      case "stop":
        this.stop()
        break

      default:break
    }

  },
  show_msg(str) {
    this.pageUrl = WebAddr.TextUrl+str

    setTimeout(() => {
      this.page_jump_org(str)
    }, 5000);

  },
  page_jump_org(str) {
    this.message = str.indexOf("设备")
    if(str.indexOf("设备中心") !== -1 || str.indexOf("资源中心") !== -1){
      this.pageUrl = WebAddr.ResourceUrl
    }
    else if(str.indexOf("服务中心") !== -1){
      this.pageUrl = WebAddr.ServiceUrl
    }
    else if(str.indexOf("添加设备") !== -1||str.indexOf("拍照") !== -1){
      router.push ({ uri: WebAddr.PhotoUri })
    }
  },
  page_jump(str) {
    switch(str){
      case '':break
      case '':break
      default:break
    }
  }
}
</script>

<style>
  @import './custom.css';
</style>